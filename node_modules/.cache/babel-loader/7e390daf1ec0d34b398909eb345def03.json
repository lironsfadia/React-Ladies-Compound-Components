{"ast":null,"code":"var _jsxFileName = \"/home/liron/projects/nirk/rlp_start/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Error from \"./Error\";\nimport Switch, { Case } from \"./Switch\";\nimport If from \"./Conditions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [count, setCount] = useState(0);\n\n  const add = () => {\n    setCount(count => count + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"display-1\",\n      children: \"React Ladies Pro Edition | 2022\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      fallback: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Children Failed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 24\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(If, {\n        condition: count > 0,\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"display-3 text-muted\",\n          children: [\"Starter Project \", count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Error, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        value: count,\n        children: [\"DJJDJD\", /*#__PURE__*/_jsxDEV(Case, {\n          match: 1,\n          children: \"display for #1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Case, {\n          match: 3,\n          children: \"display for #2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Case, {\n          match: 3,\n          children: \"display for #3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c = App;\nexport default App; // react with sugar synyex create tree, dont know the browser!\n// create dynamic tree of objects.\n// react dom read the tree and build real tree\n// declarate programming\n// react 18 - import ReactDom from react-dom/client\n\n/**\n * react dom get\n * const app = {\n * type: 'div',\n * children: [\n *  {\n *    ...???\n *  }\n * ]\n * }\n */\n\n/**\n * what is component?\n * function that returns element\n */\n\n/**\n * jquery choose\n */\n\n/**\n * render ?\n * the function runs again and return new element of react.\n * the dom not always updated!\n * rendering tab of chrome - paintFlashing tab\n */\n\n/**\n * devtools react\n */\n\n/**\n *  <React.StrictMode> - makes 2 rereders\n * render the function twice\n *\n * rerender - useState only make it.\n * const setState = useState()[1]\n *\n * pure function\n *\n * if you change something outside the function, it should alert it -\n * let name = 'nir' up the function\n *\n */\n\n/**\n * conditional rendering:\n * const  [flag, setFlag] = useState(false)\n *\n * {flaf && (\n *  <h1></h1>\n * )}\n */\n\n/**\n * const renderByFlag = () => {\n *  if(flag) {\n *    return <small className=\"\">jdjdjd</small>\n *  }\n *\n * in the return:\n * {renderByFlag()} // bad practice, the function not always running,\n *                  //  and can't do optimization\n * }\n */\n\n/**\n * Good practice:\n * import {Children} from 'react';\n * function If({condition, children}) {\n*   // Children.map(children, (child) => ());\n    // children is not always array!\n    return condition && Children.only(children);\n * }\n *\n * in the parent componen:\n * <If condition={flag}>\n *  <small></small>\n * </If>\n * \n * \n * errorBondery - if one function crash in the tree,  try catch, if function fails, not all the tree fails!\n */\n\n/**\n * concurrent mode - react 18 -\n * how to divide the code not to do blocking.\n * async action.\n * when to do diffing, properties.\n *\n * lazy loading - to load code in runtime. code spliting to bundle and load it by demand.\n * dynamic import buildin in react.\n *\n *\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Error","Switch","Case","If","App","count","setCount","add"],"sources":["/home/liron/projects/nirk/rlp_start/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Error from \"./Error\";\nimport Switch, { Case } from \"./Switch\";\nimport If from \"./Conditions\";\nfunction App() {\n  const [count, setCount] = useState(0);\n  const add = () => {\n    setCount((count) => count + 1);\n  };\n\n  return (\n    <div className=\"container\">\n      <header className=\"display-1\">React Ladies Pro Edition | 2022</header>\n      <Error fallback={<span>Children Failed!</span>}>\n        <If condition={count > 0}>\n          <small className=\"display-3 text-muted\">\n            Starter Project {count}\n          </small>\n        </If>\n      </Error>\n      <button onClick={add}>add</button>\n      <Error>\n        <Switch value={count}>\n          DJJDJD\n          <Case match={1}>display for #1</Case>\n          <Case match={3}>display for #2</Case>\n          <Case match={3}>display for #3</Case>\n        </Switch>\n      </Error>\n    </div>\n  );\n}\n\nexport default App;\n\n// react with sugar synyex create tree, dont know the browser!\n// create dynamic tree of objects.\n// react dom read the tree and build real tree\n// declarate programming\n// react 18 - import ReactDom from react-dom/client\n/**\n * react dom get\n * const app = {\n * type: 'div',\n * children: [\n *  {\n *    ...???\n *  }\n * ]\n * }\n */\n\n/**\n * what is component?\n * function that returns element\n */\n\n/**\n * jquery choose\n */\n\n/**\n * render ?\n * the function runs again and return new element of react.\n * the dom not always updated!\n * rendering tab of chrome - paintFlashing tab\n */\n\n/**\n * devtools react\n */\n\n/**\n *  <React.StrictMode> - makes 2 rereders\n * render the function twice\n *\n * rerender - useState only make it.\n * const setState = useState()[1]\n *\n * pure function\n *\n * if you change something outside the function, it should alert it -\n * let name = 'nir' up the function\n *\n */\n\n/**\n * conditional rendering:\n * const  [flag, setFlag] = useState(false)\n *\n * {flaf && (\n *  <h1></h1>\n * )}\n */\n\n/**\n * const renderByFlag = () => {\n *  if(flag) {\n *    return <small className=\"\">jdjdjd</small>\n *  }\n *\n * in the return:\n * {renderByFlag()} // bad practice, the function not always running,\n *                  //  and can't do optimization\n * }\n */\n\n/**\n * Good practice:\n * import {Children} from 'react';\n * function If({condition, children}) {\n*   // Children.map(children, (child) => ());\n    // children is not always array!\n    return condition && Children.only(children);\n * }\n *\n * in the parent componen:\n * <If condition={flag}>\n *  <small></small>\n * </If>\n * \n * \n * errorBondery - if one function crash in the tree,  try catch, if function fails, not all the tree fails!\n */\n\n/**\n * concurrent mode - react 18 -\n * how to divide the code not to do blocking.\n * async action.\n * when to do diffing, properties.\n *\n * lazy loading - to load code in runtime. code spliting to bundle and load it by demand.\n * dynamic import buildin in react.\n *\n *\n */\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,IAAiBC,IAAjB,QAA6B,UAA7B;AACA,OAAOC,EAAP,MAAe,cAAf;;;AACA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;;EACA,MAAMQ,GAAG,GAAG,MAAM;IAChBD,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,WAAf;IAAA,wBACE;MAAQ,SAAS,EAAC,WAAlB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,KAAD;MAAO,QAAQ,eAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAjB;MAAA,uBACE,QAAC,EAAD;QAAI,SAAS,EAAEA,KAAK,GAAG,CAAvB;QAAA,uBACE;UAAO,SAAS,EAAC,sBAAjB;UAAA,+BACmBA,KADnB;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF,eASE;MAAQ,OAAO,EAAEE,GAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QATF,eAUE,QAAC,KAAD;MAAA,uBACE,QAAC,MAAD;QAAQ,KAAK,EAAEF,KAAf;QAAA,kCAEE,QAAC,IAAD;UAAM,KAAK,EAAE,CAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE,QAAC,IAAD;UAAM,KAAK,EAAE,CAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF,eAIE,QAAC,IAAD;UAAM,KAAK,EAAE,CAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD;;GA3BQD,G;;KAAAA,G;AA6BT,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}